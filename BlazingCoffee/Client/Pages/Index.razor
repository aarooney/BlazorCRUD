@page "/"
@inherits CoffeeComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@using Telerik.Blazor.Services
@using Telerik.SvgIcons;
<style>
    .SaveButtonHidden{
    height:10px;
    visibility:hidden;
    }

    .SaveButtonVisible {
    height: 38px;
    visibility: visible;
    }
</style>
<Counter></Counter>
<CardContainer>
    <CardHeader>
        <div class="card-header-wrapper">
            <h3 class="card-title">@Localizer["Employees"]</h3>
            <TelerikButtonGroup>
                <ButtonGroupToggleButton @bind-Selected="@SingleTeamSelected" OnClick="OnButtonGroupClick">@Localizer["ButtonGroup_MyTeam"]</ButtonGroupToggleButton>
                <ButtonGroupToggleButton @bind-Selected="@AllTeamsSelected" OnClick="OnButtonGroupClick">@Localizer["ButtonGroup_AllTeams"]</ButtonGroupToggleButton>
            </TelerikButtonGroup>
        </div>
    </CardHeader>
    @if (employees != null)
    {
        <TelerikGrid Data="employees"
        SelectionMode="GridSelectionMode.Multiple"
        SelectedItems="@SelectedEmployees"
        SelectedItemsChanged="@( (IEnumerable<Employee> newSelected) => OnRowSelect(newSelected) )"
        EditMode="@GridEditMode.Inline"
        OnEdit="@HandleEdit"
        OnUpdate="@HandleSave"
        OnCreate="@HandleCreate"
        OnAdd="@HandleAdd"
        @ref="@Grid"
        Height="480px"
        Pageable="true"
        Sortable="true"
        FilterMode="GridFilterMode.FilterMenu"
        Resizable="true"
        Page="@Page"
        Groupable="true"
        ShowColumnMenu="true">

            <GridToolBarTemplate>
                <GridCommandButton Command="MyToolbarCommand" OnClick="@MyCommandFromToolbar" Icon="@SvgIcon.InfoCircle">Fire My Command</GridCommandButton>
            </GridToolBarTemplate>

            <GridToolBarTemplate>
                <GridSearchBox Width="150px"></GridSearchBox>
                <span class="k-toolbar-spacer"></span>
                @* <div class="SaveButtonVisible"><GridCommandButton Command="Save" Icon="@SvgIcon.Save" ShowInEdit="true">Save</GridCommandButton></div> *@
                <GridCommandButton Command="MyToolbarCommand" OnClick="@MyCommandFromToolbar" Icon="@SvgIcon.InfoCircle">Fire My Command</GridCommandButton>

                @* <TelerikButton OnClick="@OnClickHandler" Icon="@SvgIcon.MinusCircle">Delete</TelerikButton> *@
                <Delete SelectedEmployees=SelectedEmployees employees=employees OnEmployeesUpdated="HandleEmployeesUpdated"></Delete>
                <div class="@buttonClass">
                    <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">@Localizer["Grid_ExcelExport"]</GridCommandButton>
                </div>
                <GridCommandButton Command="CsvExport" Icon="@SvgIcon.FileCsv">@Localizer["Grid_CsvExport"]</GridCommandButton>
                <GridCommandButton Command="Add" Icon="@SvgIcon.PlusCircle">Add</GridCommandButton>
            </GridToolBarTemplate>
            <GridColumns>
                <GridCheckboxColumn Width="45px"
                OnCellRender="@((GridCellRenderEventArgs args) => args.Class = "chkb-centered" )"
                HeaderClass="chkb-centered"
                Resizable="false" 
                ShowColumnMenu="false">
                </GridCheckboxColumn>
                <GridColumn Title="@Localizer["Employee_Grid_Title_Personal_Information"]">
                    <Columns>
                        <GridColumn Field="@nameof(Employee.FullName)" Title="@Localizer["Employee_Grid_Title_FullName"]" Sortable="false" Width="220px" Filterable="false">
                            <Template>
                                @{
                                    var employee = context as Employee;

                                    <div class="employee-photo" style="border: 2px solid @employee.Team.TeamColor; background-image: url('./img/employees/@(employee.Id).jpg')"></div>
                                    <div class="employee-name">@employee.FullName</div>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@nameof(Employee.JobTitle)" Width="220px" Title="@Localizer["Employee_Grid_Title_JobTitle"]"></GridColumn>
                        <GridColumn Field="@nameof(Employee.Country)" Width="100px" Title="@Localizer["Employee_Grid_Title_Country"]">
                            <Template>
                                @{
                                    var employee = context as Employee;

                                    <img style="width: 30px;" src="./img/country-flags/@(employee.Country.ToLower()).png" />
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@nameof(Employee.IsOnline)" Width="100px" Title="@Localizer["Employee_Grid_Title_Status"]">
                            <Template>
                                @{
                                    var employee = context as Employee;
                                    var employeeIsOnline = employee != null && employee.IsOnline;

                                    <span class="k-badge k-badge-md k-badge-solid k-rounded-md k-badge-solid-success">@(employee != null && employee.IsOnline ? "Online" : "Offline")</span>
                                }
                            </Template>
                        </GridColumn>
                    </Columns>
                </GridColumn>
                <GridColumn Title="@Localizer["Employee_Grid_Title_Performance"]">
                    <Columns>
                        <GridColumn Field="@nameof(Employee.Rating)" Width="185px" Title="@Localizer["Employee_Grid_Title_Rating"]">
                            <Template>
                                <TelerikRating Value="((Employee)context).Rating" />
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@nameof(Employee.Target)" Width="230px" Title="@Localizer["Employee_Grid_Title_Engagement"]">
                            <Template>
                                @{
                                    var employee = context as Employee;

                                    if (employee != null)
                                    {
                                        <TelerikProgressBar Max="100" Value="employee.Target" />
                                    }
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@nameof(Employee.Budget)" DisplayFormat="{0:C}" Width="100px" Title="@Localizer["Employee_Grid_Title_Budget"]"></GridColumn>
                    </Columns>
                </GridColumn>
                <GridColumn Title="@Localizer["Employee_Grid_Title_Contacts"]">
                    <Columns>
                        <GridColumn Field="@nameof(Employee.Phone)" Width="130px" Title="@Localizer["Employee_Grid_Title_Phone"]"></GridColumn>
                        <GridColumn Field="@nameof(Employee.Address)" DisplayFormat="{0:C}" Width="200px" Title="@Localizer["Employee_Grid_Title_Address"]"></GridColumn>
                    </Columns>
                </GridColumn>
                <GridCommandColumn Width="100px">
                    <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil">Edit</GridCommandButton>
                </GridCommandColumn>
                <GridCommandColumn Width="100px"  >
                    @* <GridCommandButton Command="Add"  Icon="@SvgIcon.PlusCircle">Add</GridCommandButton> *@


                    <GridCommandButton Command="Save" Icon="@SvgIcon.Save" ShowInEdit="true" >Save</GridCommandButton>


                </GridCommandColumn>
                <GridCommandColumn Width="100px">
                    @* <GridCommandButton Command="Delete" Icon="@SvgIcon.Pencil" OnClick="@OnClickHandler">Delete Test</GridCommandButton> *@
                    @* <Delete SelectedEmployees=SelectedEmployees employees=employees>Testing my Delete Component</Delete> *@
                    <Delete SelectedEmployees=SelectedEmployees employees=employees OnEmployeesUpdated="HandleEmployeesUpdated"></Delete>
                </GridCommandColumn>




            </GridColumns>
        </TelerikGrid>
    }
</CardContainer>

@code {
    private string buttonClass = "SaveButtonHidden";
    private string buttonVisibility = "visibility:hidden"; // Initially hidden

    private bool isAddingNewRow = false;

    private List<Employee> employees { get; set; } = new List<Employee>();
    TelerikGrid<Employee> Grid { get; set; }
    private IEnumerable<Employee> SelectedEmployees { get; set; } = Enumerable.Empty<Employee>();

    public int Page { get; set; } = 1;
    public bool SingleTeamSelected { get; set; }
    public bool AllTeamsSelected { get; set; } = true;

    private void HandleEmployeesUpdated(List<Employee> updatedEmployees)
    {
        // Handle the updated employee list
        employees = updatedEmployees;
    }

    
    protected override void OnInitialized()
    {
        Layout.DocsTitle = Localizer["HumanCapital"];

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        employees = (await Http.GetFromJsonAsync<Employee[]>("api/employees")).ToList();
    }

    private void HandleEdit(GridCommandEventArgs args)
    {
        var editedRow = args.Item; // The row being edited
        Console.WriteLine("Editing row: ", editedRow);
    }

    private async Task HandleSave(GridCommandEventArgs args)
    {
        var updatedEmployee = args.Item as Employee; // Assuming the row is of type Employee

        if (updatedEmployee != null)
        {
            // Send PUT request to update employee in the database
            var response = await Http.PutAsJsonAsync($"api/Employees/{updatedEmployee.Id}", updatedEmployee);
            employees = (await Http.GetFromJsonAsync<Employee[]>("api/employees")).ToList();
            if (response.IsSuccessStatusCode)
            {
                // Successfully updated
                Console.WriteLine("Employee updated successfully");
            }
            else
            {
                // Handle error response
                Console.WriteLine("Error updating employee");
            }
        }
    }

    private bool isEditing = false;
    private string buttonText = "Add";

    private async Task HandleAdd(GridCommandEventArgs args)
    {
        // var newEmployee = args.Item as Employee;
        // var response = await Http.PostAsJsonAsync("api/employees", newEmployee);
        // employees = (await Http.GetFromJsonAsync<Employee[]>("api/employees")).ToList();
        buttonVisibility = "visibility: visible"; // Change visibility to visible

        buttonClass = "SaveButtonVisible";
    }
 
    private void MyCommandFromToolbar(GridCommandEventArgs args)
    {
        //note - the args.Item object is null because the command item is not associated with an item

        Console.WriteLine("ERROR");

    }

    private async Task HandleCreate(GridCommandEventArgs args)
    {
        // Assuming that args.Item contains the new employee.
        var newEmployee = args.Item as Employee;
        buttonClass = "SaveButtonHidden";
        if (newEmployee != null)
        {
            try
            {
                newEmployee.Id = 9000;
                newEmployee.TeamId = 2;
                // Send a POST request using HttpClient to the API endpoint for creating an employee.
                var response = await Http.PostAsJsonAsync<Employee>("api/employees", newEmployee);
                
                // Check if the request was successful
                if (response.IsSuccessStatusCode)
                {
                    // Optionally: You can refresh the grid or show a success message
                    // Get the created employee object (optional)
                   //ar createdEmployee = await response.Content.ReadFromJsonAsync<Employee>();
                    employees = (await Http.GetFromJsonAsync<Employee[]>("api/employees")).ToList();
                    // Handle success (e.g., update grid, display message, etc.)
                    Grid.Rebind();
                }
                else
                {
                    // Handle failure (e.g., show error message)
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(errorMessage);
                    // Handle error logic here (show message, etc.)
                }
            }
            catch (Exception ex)
            {
                // Handle exceptions (e.g., network issues, etc.)
                // You can log the error or show a user-friendly message
                Console.Error.WriteLine($"Error occurred while creating employee: {ex.Message}");
            }
        }
    }






    private void OnCellRender(GridCellRenderEventArgs args)
    {
        args.Class = "center-cell";
    }


    public async Task OnButtonGroupClick()
    {
        var state = Grid.GetState();

        if (AllTeamsSelected)
        {
            state.FilterDescriptors.Add(SingleTeamDescriptor());
        }
        else
        {
            Grid.StateContainer.RemoveFilter("TeamId");
            state = Grid.GetState();
        }

        Page = 1;

        await Grid.SetStateAsync(state);
    }

    private async Task OnRowSelect(IEnumerable<Employee> employees)
    {
        // Update the SelectedItems collection manually.
        // When using two-way binding, this happens automatically.
        SelectedEmployees = employees;
        foreach (var employee in SelectedEmployees)
        {
            Console.WriteLine(employee.Id);  // Access employee properties
            var response = await Http.DeleteAsync($"api/employees/{employee.Id}");
        }

        employees = (await Http.GetFromJsonAsync<Employee[]>("api/employees")).ToList();
        //SelectedEmployees[0].Id

        Console.WriteLine("OnRowSelect is succesfully running");

    }

    

   

    FilterDescriptor SingleTeamDescriptor() => new FilterDescriptor("TeamId", FilterOperator.IsEqualTo, 3);
}